using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    /* TODO: 
        * Clear generated word before displaying one from WordFactory
        * Turn off alphabet panel in editor when running the game
        * Change End Game Menu title depending on win or lose state
        * Change graphics depending on guesses left
        * Have a BodyCondition enum state for Audio later on

    */

    #region Private Variables
    
    private string sInput = "";         // holds the player's input text
    private string _wordGuessing = "";  // holds the word generated by WordFactory
    private char[] _alphabetArray       // array of alphabet characters
        = new char[26]
        {
            'a','b','c','d',
            'e','f','g','h',
            'i','j','k','l',
            'm','n','o','p',
            'q','r','s','t',
            'u','v','w','x','y','z'
        };
    private char _currLetter = ' ';     // used to get the character in the player's input
    private int _characterLimit = 1;    // used to assign the character limit in the player input field
    private int _wrongGuessesLeft = 6;  // controls how many guesses the player can get wrong before losing
    private enum GameState              // enum to define the different states of the game
    { 
        playing,
        preGame,
        won, 
        lost 
    }

    // state to control method execution that control the game flow and variable setting
    // set to preGame state at the start of the game launch
    private GameState _gameState = GameState.preGame;

    // used to store the list of indices the letter is at in the word
    List<int> _letterPositionIndices = new List<int>();
    #endregion

    // This section is for objects on which the other class scripts are attached to allow for use of their fields and behaviours.
    [Header("Script Objects")]
    public WordFactory wordFactory;     // handles the word generation and manipulation in the game
    public SoundManager soundManager;   // handles the audio in the game

    // This section is for objects that are involved in game play, such as the player input field, hangman graphics, and alphabet.
    [Header("Gameplay Objects")]
    public InputField playerInputField; // text box that gets player keystrokes (set to alphanumeric only)
    public GameObject alphabetPanel;    // alphabet letters holder that displays guessed letters
    public Text underscoredWord;        // text object that is updated through gameplay and holds the missing word for the player
    public Text guessesLeftNumberText;  // text that holds the number of guesses left for the player
    public Text endGameTitle;           // text that displays the win/lose message to the player on the End Game Menu
    public Image gallowsImage;          // holds the image that displays the gallows and will change through gameplay
    public Image hangmanImage;          // holds the image that displays the man and will change through gameplay
    public bool isPaused = false;       // controls the enabling of the pause menu
    

    void Start()
    {
        // this needs to be within the same method event that the player presses enter
        _currLetter = sInput[0];
    }

    
    void Update()
    {
        // checking the current state of the game to run code specific to that state
        switch (_gameState)
        {
            case GameState.playing:
                {
                    if (Input.GetKeyDown(KeyCode.KeypadEnter) && playerInputField.isFocused)
                    {
                        // assigning our input to the text the player enters without the whitespaces
                        sInput = wordFactory.RemoveWhiteSpaces(playerInputField.text);

                        // if the player entered 1 character
                        if (sInput.Length == 1)
                        {
                            // get the first character from their input without whitespaces
                            _currLetter = wordFactory.RemoveWhiteSpaces(underscoredWord.text)[0];

                            // if the letter is not in the word the player is guessing (they guessed wrong)
                            if (!wordFactory.EvaluateCharacter(_currLetter, _wordGuessing))
                            {
                                _wrongGuessesLeft--;    // decrement wrong guesses left

                                // this enables the letter object at the same index of the character in the alphbet
                                // to show they have guessed the current letter
                                EnableLetter(alphabetPanel, GetAlphabetIndex(_currLetter));
                            }

                            // since we know the letter exists in the word already, we can clear our previous indices
                            _letterPositionIndices.Clear();

                            //  and get the new index(s) position(s) of it in the word
                            _letterPositionIndices = wordFactory.GetIndicesInWord(_currLetter, _wordGuessing);

                            // assign new string to word with underscores at index positions replaced with letter
                            string tempUnderscoreWord = ReplaceUnderscoreWithLetter(_wordGuessing, _currLetter);

                            // assign created string to itself with spaces between each letter
                            tempUnderscoreWord = AddSpacesBetweenLetters(tempUnderscoreWord);

                            // set our original text the player will see to the formatted word that includes spaces
                            // and previous underscores, aside from where our guessed letter was
                            underscoredWord.text = tempUnderscoreWord;  

                            // enable the letter object in the alphabet panel at the same index of the character in the alphbet
                            EnableLetter(alphabetPanel, GetAlphabetIndex(_currLetter));
                        }
                        else // otherwise if they entered more than 1 character
                        {
                            // if the word they entered is the correct word
                            if (wordFactory.EvaluateWord(sInput, _wordGuessing))
                            { _gameState = GameState.won; } // tell the game the player won
                            else
                            { _wrongGuessesLeft--; }   // if incorrect guess, decrement the number of wrong guesses left
                        }

                        // check if underscored word (without spaces) equals the generated word (without spaces)
                        // if it does, set game state to 'won'
                    }

                    // if the player has no more incorrect guesses left
                    if (_wrongGuessesLeft == 0)
                    { _gameState = GameState.lost; }    // tell the game they lost
                    break;
                }
                
            case GameState.preGame:
                {
                    // set graphics
                    break; 
                }
            case GameState.won:
                {
                    // enable End Game Menu
                    // disable game
                    // reset incorrect guesses
                    // disable all alphabet letters
                    // reset graphics
                    // Generate new word
                    // clear sInput and playerInputField
                    break; 
                }
            case GameState.lost:
                {
                    // enable End Game Menu
                    // disable game
                    // reset incorrect guesses
                    // disable all alphabet letters
                    // reset graphics
                    // do not generate new word
                    // clear sInput and playerInputField
                    break; 
                }
            default:
                { 
                    // basically same as pregame
                    // if they're here, something went wrong, so reset EVERYTHING and send them back to pregame state
                    break; 
                }
        }

        

        


        // needs to be on Enter button in InputField:
            // check if character has been used and clear InputField if it has

            // clear our existing list local to Game Manager

            // set our list to equal the list this returns (indices the character is at)
        // ourLocalList = wordFactory.GetIndicesInWord(playerInputField.text, wordFactory.GeneratedWord);
            // loop through our generated word string and change the letters at each index in our list to the letter
            // this enables the letter object at the same index of the character in the alphbet 
        
    }

    // enables a Text object at an index in a Text array 
    public void EnableLetter(GameObject alphabetObject_p, int index_p)
    { alphabetObject_p.GetComponentsInChildren<Text>(true)[index_p].enabled = true; }

    // returns the index of the letter in the alphabet
    public int GetAlphabetIndex(char letter_p)
    {
        int index = 0;
        for (int i = 0; i < _alphabetArray.Length; i++)
        {
            if (_alphabetArray[i] == currLetter)
            { index = i; }
        }
        return index;
    }

    public string ReplaceUnderscoreWithLetter(string word_p, char letter_p)
    {
        word_p = wordFactory.RemoveWhiteSpaces(underscoredWord.text);
        string halfWord1, halfWord2;
        foreach (int indexOfLetter in _letterPositionIndices)
        {
            // split the word just before the index of the letter position
            halfWord1 = word_p.Substring(0, indexOfLetter); // first half before letter position
            halfWord2 = word_p.Substring(indexOfLetter + 2);// second half after letter position
            halfWord1 += letter_p;          // add letter to end of first half
            word_p = halfWord1 + halfWord2; // join word back together
        }
        return word_p;
    }

    public string AddSpacesBetweenLetters(string word_p)
    {
        // create a new char array
        char[] wordLetters = new char[word_p.Length];

        // get all the characters of our underscored word into a char array
        wordLetters = word_p.ToCharArray();
        word_p = "";    // empty the temporary underscored word

        // loop as many times as we have letters in the word
        for (int i = 0; i < wordLetters.Length; i++)
        {
            if (i == wordLetters.Length - 1)// if we're at the last letter index
            { word_p += wordLetters[i]; }   // don't add a space
            word_p += wordLetters[i] + " "; // else, add the letter and a space to the word
        }
        return word_p;
    }

    
}
